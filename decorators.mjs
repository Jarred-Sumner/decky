var __commonJS = (callback, module) => () => (module || (module = {exports: {}}, callback(module.exports, module)), module.exports);

// node_modules/.pnpm/es-module-lexer@0.4.0/node_modules/es-module-lexer/dist/lexer.cjs
var require_lexer = __commonJS((exports) => {
  "use strict";
  exports.parse = parse;
  exports.init = void 0;
  var A = new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  function parse(E2, g = "@") {
    if (!B)
      return init.then(() => parse(E2));
    let I = E2.length + 1, D = (B.__heap_base.value || B.__heap_base) + 4 * I - B.memory.buffer.byteLength;
    D > 0 && B.memory.grow(Math.ceil(D / 65536));
    let w = B.sa(I - 1);
    if ((A ? C : Q)(E2, new Uint16Array(B.memory.buffer, w, I)), !B.parse())
      throw Object.assign(new Error(`Parse error ${g}:${E2.slice(0, B.e()).split(`
`).length}:${B.e() - E2.lastIndexOf(`
`, B.e() - 1)}`), {idx: B.e()});
    let L = [], k = [];
    for (; B.ri(); ) {
      let A2 = B.is(), Q2 = B.ie(), C2;
      B.ip() && (C2 = N(E2.slice(A2 - 1, Q2 + 1))), L.push({n: C2, s: A2, e: Q2, ss: B.ss(), se: B.se(), d: B.id()});
    }
    for (; B.re(); )
      k.push(E2.slice(B.es(), B.ee()));
    function N(A2) {
      try {
        return (0, eval)(A2);
      } catch {
      }
    }
    return [L, k, !!B.f()];
  }
  function Q(A2, Q2) {
    let C2 = A2.length, B2 = 0;
    for (; B2 < C2; ) {
      let C3 = A2.charCodeAt(B2);
      Q2[B2++] = (255 & C3) << 8 | C3 >>> 8;
    }
  }
  function C(A2, Q2) {
    let C2 = A2.length, B2 = 0;
    for (; B2 < C2; )
      Q2[B2] = A2.charCodeAt(B2++);
  }
  var B, init = WebAssembly.compile((E = "", typeof window != "undefined" && typeof atob == "function" ? Uint8Array.from(atob(E), (A2) => A2.charCodeAt(0)) : Buffer.from(E, "base64"))).then(WebAssembly.instantiate).then(({exports: A2}) => {
    B = A2;
  });
  exports.init = init;
  var E;
});

// index.ts
import {
  promises
} from "fs";

// decorators.ts
import {
  build
} from "esbuild";
import glob from "fast-glob";
var DecoratorType;
(function(DecoratorType2) {
  DecoratorType2[DecoratorType2.property = 0] = "property", DecoratorType2[DecoratorType2.klass = 1] = "klass";
})(DecoratorType || (DecoratorType = {}));
async function decorators(decoratorGlob = "./**/*.{decorator.ts,dec.ts,decorators.ts,decky.ts,decorator.tsx,dec.tsx,decorators.tsx,decky.tsx}", additionalConfig = {}) {
  let entryPoints = additionalConfig?.entryPoints?.length ? additionalConfig.entryPoints : await glob(decoratorGlob);
  return await build({
    minify: !1,
    minifySyntax: !0,
    format: "cjs",
    sourcemap: "both",
    outdir: ".",
    outbase: ".",
    ...additionalConfig,
    platform: "node",
    entryPoints,
    bundle: !1
  }), entryPoints;
}

// index.ts
import {
  basename,
  dirname,
  extname,
  join,
  relative
} from "path";
import chalk from "chalk";
var esmLexer = require_lexer(), hasLoadedLexers = !1;
async function initLexers() {
  hasLoadedLexers || (await Promise.all([esmLexer.init]), hasLoadedLexers = !0);
}
var VALID_DECORATOR_IMPORT_EXTENSIONS = [
  ".decorator.ts",
  ".decorator.tsx",
  ".decorator",
  ".decky.ts",
  ".decky.tsx",
  ".decky",
  ".dec.ts",
  ".dec.tsx",
  ".dec"
];
function filterDecoratorImport(esm, index) {
  return VALID_DECORATOR_IMPORT_EXTENSIONS.includes(extname(esm.n).toLowerCase());
}
function parseDecoratorImports(code, filename) {
  let [imports] = esmLexer.parse(code, filename);
  return imports.filter(filterDecoratorImport);
}
var ProcessorError = class extends Error {
  constructor(message, file, lineNumber, lineText, column) {
    super(message);
    this.note = {
      text: message,
      location: {
        file,
        line: lineNumber,
        lineText,
        column
      }
    };
  }
};
function buildDecoratorProcessor(decoratorsModuleMap) {
  let fileMapping = {}, allPrefixes = new Set();
  for (let moduleName in decoratorsModuleMap) {
    let decorators2 = decoratorsModuleMap[moduleName];
    if (typeof decorators2 != "object" || Object.keys(decorators2).length === 0) {
      console.warn(`[decky] "decorators" not exported in ${moduleName}, ignoring file.`);
      continue;
    }
    let decoratorKeys = Object.keys(decorators2).sort().reverse(), decoratorPrefixes = decoratorKeys.map((a) => a.toString()), decoratorFunctions = new Array(decoratorKeys.length), flattenedFuncs = decoratorKeys.map((a) => decorators2[a].callback);
    for (let i = 0; i < decoratorKeys.length; i++) {
      let key = decoratorKeys[i], prefix = decoratorPrefixes[i], length = key.length, decoratorFunc = flattenedFuncs[i], processDecorator = async (prefixStart, result) => {
        globalThis.process.env.DECKY_TIMINGS && console.time(`[decky] -> ${prefix}: ${relative(globalThis.process.cwd(), result.filePath)}`);
        let code = result.code, prefixEnd = result.stopIndex, argStart = prefixEnd, lineEnd = prefixEnd;
        for (; code[lineEnd] !== `
` && (lineEnd++, !(code.length < lineEnd)); )
          ;
        for (; code[argStart] !== "(" && argStart < lineEnd; )
          argStart++;
        let argEnd = -1, argList;
        if (code[argStart++] === "(")
          if (argEnd = code.indexOf(")", argStart), argEnd - 1 > argStart) {
            if (argEnd < 0)
              throw new ProcessorError(`Missing ) for ${prefix}`, result.filePath, result.code.substring(0, prefixStart).split(`
`).length, result.code.split(`
`)[result.code.substring(0, prefixStart).split(`
`).length], prefixEnd);
            try {
              argList = JSON.parse("[" + code.substring(argStart, argEnd) + "]");
            } catch (exception) {
              throw new ProcessorError(`Arguments to ${prefix} must be JSON. Received: [${code.substring(argStart, argEnd)}]`, result.filePath, result.code.substring(0, prefixStart).split(`
`).length - 1, result.code.split(`
`)[result.code.substring(0, prefixStart).split(`
`).length - 1], argStart);
            }
          } else
            argStart = -1, argList = [];
        else
          argStart = -1, argList = [];
        let nextLineStart = lineEnd + 1;
        for (; code[nextLineStart] === " " || code[nextLineStart] === ";" || code[nextLineStart] === `
`; )
          nextLineStart++;
        let _nextNewline = code.indexOf(`
`, nextLineStart), _nextSemicolon = code.indexOf(";", nextLineStart), nextLineEnd = (_nextNewline < _nextSemicolon ? _nextNewline : _nextSemicolon) + 1, nextLine = code.substring(nextLineStart, nextLineEnd), isStatic = !1, qualifier = null;
        nextLine.startsWith("export ") && (nextLine = nextLine.substring("export ".length).trim()), nextLine.startsWith("public ") ? (qualifier = "public", nextLine = nextLine.substring("public".length)) : nextLine.startsWith("private ") ? (qualifier = "private", nextLine = nextLine.substring("private".length)) : nextLine.startsWith("protected ") && (qualifier = "protected", nextLine = nextLine.substring("protected".length)), nextLine = nextLine.trim();
        let isClass = nextLine.startsWith("class ");
        if (isClass || (isStatic = nextLine.startsWith("static "), isStatic && nextLine.substring("static ".length)), isClass) {
          nextLine = nextLine.substring("class ".length).trim(), nextLine = nextLine.substring(0, nextLine.indexOf(" ")).trim(), globalThis.process.env.DECKY_TIMINGS && console.time(`[decky] ${basename(moduleName).split(".")[0]}.${prefix}(${argList.join(", ")})`);
          try {
            await decoratorFunc({
              className: nextLine,
              args: argList,
              metadata: result
            }), result.stopIndex = nextLineStart;
          } catch (exception) {
            throw new ProcessorError(exception.toString() + `
In file:
${result.code}`, result.filePath, result.code.substring(0, prefixStart).split(`
`).length, result.code.split(`
`)[result.code.substring(0, prefixStart).split(`
`).length - 1], prefixEnd);
          } finally {
            globalThis.process.env.DECKY_TIMINGS && console.timeEnd(`[decky] ${basename(moduleName).split(".")[0]}.${prefix}(${argList.join(", ")})`);
          }
          return !1;
        } else {
          let key2 = nextLine.trim(), typeName = "", typeSeparatorIndex = nextLine.indexOf(":"), equalsIndex = nextLine.indexOf("="), openParentheses = nextLine.indexOf("("), defaultValue;
          typeSeparatorIndex > -1 && (key2 = nextLine.substring(0, typeSeparatorIndex).trim(), typeName = nextLine.substring(typeSeparatorIndex + 1).trim());
          let semicolonIndex = typeName.indexOf(";");
          if (equalsIndex > -1 && openParentheses === -1) {
            key2 === "" && (key2 = nextLine.substring(0, equalsIndex).trim());
            let _defaultValue = nextLine.substring(equalsIndex + 1).trim().replace(/;/gm, "").trim();
            try {
              defaultValue = JSON.parse(_defaultValue);
            } catch (exception) {
              process.env.DECKY_VERBOSE && console.warn(exception);
            }
            typeof defaultValue != "undefined" && typeName === "" && (typeName = typeof defaultValue);
          }
          if (semicolonIndex > -1 && (typeName = typeName.substring(0, semicolonIndex)), key2 === "")
            throw new ProcessorError("Missing name for property below property descriptor", result.filePath, result.code.substring(0, prefixStart).split(`
`).length, nextLine, prefixEnd);
          result.code = code;
          let newCode;
          globalThis.process.env.DECKY_TIMINGS && console.time(`[decky] ${basename(moduleName).split(".")[0]}.${prefix}(${argList.join(", ")})`);
          try {
            newCode = await decoratorFunc({
              key: key2,
              type: typeName,
              args: argList,
              isStatic,
              qualifier,
              metadata: result,
              defaultValue
            });
          } catch (exception) {
            throw new ProcessorError(exception.toString() + `
In file:
${result.code}`, result.filePath, result.code.substring(0, prefixStart).split(`
`).length, result.code.split(`
`)[result.code.substring(0, prefixStart).split(`
`).length], prefixEnd);
          } finally {
            globalThis.process.env.DECKY_TIMINGS && console.timeEnd(`[decky] ${basename(moduleName).split(".")[0]}.${prefix}(${argList.join(", ")})`);
          }
          return globalThis.process.env.DECKY_TIMINGS && console.timeEnd(`[decky] -> ${prefix}: ${relative(globalThis.process.cwd(), result.filePath)}`), !newCode && newCode !== "" ? (result.startIndex = prefixStart, result.stopIndex = nextLineStart, result.code = newCode || "", !1) : (result.startIndex = prefixStart - 1, result.stopIndex = nextLineEnd - 1, result.code = newCode || "", !0);
        }
      };
      decoratorFunctions[i] = processDecorator;
    }
    fileMapping[basename(moduleName, extname(moduleName))] = {
      decoratorFunctions,
      decoratorPrefixes
    }, decoratorPrefixes.forEach((prefix) => allPrefixes.add(prefix));
  }
  let prefixes = [...allPrefixes].sort().reverse();
  return {
    process: async (code, filePath) => {
      let moduleImports;
      try {
        moduleImports = parseDecoratorImports(code, filePath);
      } catch (exception) {
        throw new ProcessorError(`Import/export parse error: ${exception.toString()}`, filePath, 0, code, 0);
      }
      let modules = new Array(moduleImports.length), moduleI = 0;
      for (let moduleImport of moduleImports) {
        code = code.substring(0, moduleImport.ss) + " ".repeat(moduleImport.se - moduleImport.ss + 1) + code.substring(moduleImport.se + 1);
        let name = basename(moduleImport.n);
        fileMapping[name] && (modules[moduleI++] = name);
      }
      code = code.replace(/^\s*\/\/.*\n?$/gm, "").trim().split(`

`).join(`
`).trim() + `
`, globalThis.process.env.DECKY_VERBOSE && console.log(chalk.yellow(code)), moduleI !== modules.length && (modules.length = moduleI);
      let result = {
        code,
        originalSource: code,
        filePath,
        startIndex: -1,
        stopIndex: -1
      }, symbolI = code.lastIndexOf("@") - 1;
      if (symbolI < -1)
        return {contents: code, note: null};
      symbolI === -1 && symbolI++;
      let _prefixI = -1, prefixI = -1, prefix = "", _code = "", didChange = !1, lastMatchIndex = -1;
      do {
        if (symbolI = result.code.lastIndexOf("@"), symbolI === -1)
          break;
        for (result.startIndex = symbolI, result.stopIndex = result.startIndex + 1, prefix = "0AF"; result.stopIndex < result.code.length; )
          if (result.stopIndex++, result.code[result.stopIndex] === " " || result.code[result.stopIndex] === "(" || result.code[result.stopIndex] === `
` || result.code[result.stopIndex] === ";" || result.code[result.stopIndex] === ",") {
            prefix = result.code.substring(result.startIndex + 1, result.stopIndex);
            break;
          }
        let decoratorModuleName;
        for (let moduleName of modules)
          if (prefixI = fileMapping[moduleName].decoratorPrefixes.indexOf(prefix), prefixI > -1) {
            decoratorModuleName = moduleName;
            break;
          }
        if (prefixI === -1) {
          result.code = result.code.substring(0, symbolI) + "\u{1F364}" + result.code.substring(symbolI + 1);
          continue;
        }
        let {decoratorFunctions} = fileMapping[decoratorModuleName];
        if (result.startIndex > -1 && decoratorFunctions[prefixI]) {
          _code = result.code, didChange = !1;
          try {
            didChange = await decoratorFunctions[prefixI](result.startIndex, result);
          } catch (exception) {
            return exception instanceof ProcessorError ? {
              contents: "",
              note: exception.note
            } : {
              contents: "",
              note: new ProcessorError(exception.toString(), filePath, 0, result.code, 0).note
            };
          }
          didChange ? result.startIndex > -1 && result.stopIndex > -1 && (result.code = _code.substring(0, result.startIndex) + result.code + _code.substring(result.stopIndex)) : result.code = _code.substring(0, result.startIndex - 1) + _code.substring(result.stopIndex), result.startIndex = result.stopIndex = -1;
        }
      } while (symbolI > -1);
      return globalThis.process.env.DECKY_VERBOSE && console.log(chalk.green(result.code)), {
        contents: result.code.replace(/🍤/gm, "@"),
        note: null
      };
    },
    prefixes
  };
}
function onResolveDecorator(args) {
  return {
    path: args.path,
    namespace: "decorator-stub"
  };
}
function onResolveStaticDecorators(args) {
  return {
    path: args.path,
    namespace: "decky"
  };
}
var staticDecoratorCode = [property, klass].map((stub) => `/* @__PURE__ */
export function ${stub}(...args){return args;}
`).join(`
`);
function onLoadStaticDecorators(args) {
  return {
    contents: staticDecoratorCode,
    loader: "js"
  };
}
function plugin(decorators2) {
  let {prefixes, process: process2} = buildDecoratorProcessor(decorators2), prefixesWithAt = prefixes.map((a) => a.startsWith("@") ? a : "@" + a);
  function isPotentialMatch(content) {
    if (!content.includes("@"))
      return !1;
    for (let prefix of prefixesWithAt)
      if (content.includes(prefix))
        return !0;
    return !1;
  }
  function onLoadDecoratorStub(args) {
    let stub = require(args.path).decorators;
    return {
      contents: Object.keys(stub).map((stub2) => `/* @__PURE__ */
export function ${stub2}(...args){return args;}
`).join(`
`),
      loader: "ts"
    };
  }
  async function onLoadCode(args) {
    let loader = extname(args.path).substring(1), contents = await promises.readFile(args.path, "utf8");
    if (!isPotentialMatch(contents))
      return {
        contents,
        loader
      };
    globalThis.process.env.DECKY_TIMINGS && console.time("[decky] ./" + relative(globalThis.process.cwd(), args.path)), await initLexers();
    let {note, contents: _contents} = await process2(contents, args.path) ?? {};
    return globalThis.process.env.DECKY_TIMINGS && console.timeEnd("[decky] ./" + relative(globalThis.process.cwd(), args.path)), {
      contents: _contents,
      errors: note ? [{location: note.location, text: note.text}] : void 0,
      loader
    };
  }
  return {
    name: "decky",
    setup(build2) {
      build2.onResolve({filter: /\.(decorator|dec|decky)\.(ts|tsx)$/}, onResolveDecorator), build2.onResolve({filter: /^decky$/}, onResolveStaticDecorators), build2.onLoad({filter: /^decky$/, namespace: "decky"}, onLoadStaticDecorators), build2.onLoad({filter: /\.(decorator|dec)\.(ts)$/, namespace: "decorator-stub"}, onLoadDecoratorStub), build2.onLoad({filter: /\.(decorator|dec)\.(tsx)$/, namespace: "decorator-stub"}, onLoadDecoratorStub), build2.onLoad({filter: /\.(ts|tsx)$/}, onLoadCode);
    }
  };
}
function property(callback) {
  return {
    callback,
    type: DecoratorType.property
  };
}
function propertyVoid(callback) {
  return {
    callback,
    type: DecoratorType.property
  };
}
function klass(callback) {
  return {
    callback,
    type: DecoratorType.klass
  };
}
function klassVoid(callback) {
  return {
    callback,
    type: DecoratorType.klass
  };
}
async function load(decoratorsGlob, additionalConfig) {
  let entryPoints = await decorators(decoratorsGlob, additionalConfig), files = {};
  for (let file of entryPoints)
    Object.assign(files, {
      [file]: require(join(process.cwd(), dirname(file), basename(file).replace(".ts", ".js"))).decorators
    });
  return plugin(files);
}
export {
  klass as c,
  klassVoid as cV,
  klass,
  klassVoid,
  load,
  property as p,
  propertyVoid as pV,
  plugin,
  property,
  propertyVoid
};
//# sourceMappingURL=data:application/json;base64,
